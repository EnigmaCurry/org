#+hugo_base_dir: ../hugo
#+hugo_section: /publishing-with-org-mode
#+hugo_weight: auto
#+hugo_paired_shortcodes: %notice badge button %children %index run stdout edit math mermaid openapi
#+STARTUP: align

* Publishing with org-mode, ox-hugo, and literate programming.
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :linkTitle Publishing with org-mode
:EXPORT_HUGO_WEIGHT: 900
:END:

This book describes how this site is written, in Org-mode, with
ox-hugo, and bits of Literate Programming.

#+attr_shortcode: :depth 999
#+begin_index
index
#+end_index

* Dependencies
:PROPERTIES:
:EXPORT_FILE_NAME: dependencies
:END:

This site is built with:

- [[https://www.gnu.org/software/emacs/][Emacs]]
- [[https://orgmode.org/][Org-mode]]
- [[https://ox-hugo.scripter.co/][Ox-hugo]]
- [[https://gohugo.io][Hugo]] (extended edition)
- GitHub actions (also compatible with Gitea actions)

The GitHub/Gitea actions file includes all its dependencies
declaratively.

To build locally, you must install Emacs (29+), and hugo (v0.120+),
using your package manager, or by downloading directly from their
respective project pages. Please be aware that hugo has two editions:
[[https://gohugo.io/installation/linux/#editions][standard and extended]], and this build requires the extended edition
(TODO: verify this - I had some problems before - but maybe they are
resolved - I am still using the extended edition for now).

Read the [[/linux-workstation/emacs-on-fedora/index.html][Linux Workstation chapter for setting up Emacs]].

Please note that your package manager may container an old version of
Hugo that is incompatible with the Relearn theme. You can install the
/latest/ version of Hugo from the [[https://github.com/gohugoio/hugo/releases][Hugo GitHub releases page]].

For example, to download the X86_64 release of hugo =v0.123.8=:

#+begin_run
## Do this if your package manager installs an old incompatible version of Hugo:
cd ~/Downloads
wget https://github.com/gohugoio/hugo/releases/download/v0.123.8/hugo_extended_0.123.8_linux-amd64.tar.gz
tar xfvz hugo_extended_0.123.8_linux-amd64.tar.gz
sudo install hugo /usr/local/bin/hugo
#+end_run

You will also need to clone the git source of this website to your
workstation:

#+begin_run
git clone https://github.com/EnigmaCurry/org.git 
   ~/git/vendor/enigmacurry/org
#+end_run

I always recommend to everyone, that you choose to use the
=~/git/vendor/ORG_NAME/REPO_NAME= path structure when cloning any git
repository (including your own!). This suggested path is a
vendor-neutral convention, useful for documentation purposes, and
which shouldn't conflict with any existing directory you might have.
Therefore the instructions should generally work on all machines. If
we all agree to use the same path, the instructions are much easier to
write, and read from! If you are adamant about cloning this elsewhere,
consider making a symlink from this path anyway (In this case,
=~/git/vendor/enigmacurry/org=).

* Building locally
:PROPERTIES:
:EXPORT_FILE_NAME: building-locally
:END:

Change into the directory where you cloned the source:

#+begin_run
cd ~/git/vendor/enigmacurry/org
#+end_run

Run the install method to download the theme:

#+begin_run
## This just downloads/installs the theme:
make install
#+end_run

Build the site:

#+begin_run
## This builds the entire static site into the public/ directory:
make build
#+end_run

Run the development server:

#+begin_run
## This builds the entire site, and then runs the live reload server:
make serve
#+end_run

* Publishing with GitHub pages
:PROPERTIES:
:EXPORT_FILE_NAME: publish-with-github-pages
:END:

This site is automatically published to [[https://pages.github.com][GitHub Pages]] via the included
action file: [[https://github.com/EnigmaCurry/org/blob/ox-hugo/.github/workflows/deploy.yaml][.github/workflows/deploy.yaml]]. You can fork the
repository and enable the action to run on your behalf and publish to
your own site automatically, whenever you run =git push=.

* Publishing with SFTP
:PROPERTIES:
:EXPORT_FILE_NAME: publish-with-sftp
:END:

If you don't want to use GitHub pages, you can alternatively publish
to any webserver via SFTP.

To do so, you must install [[https://rclone.org/][Rclone]].

For example, on Fedora:

#+begin_run
## On Fedora atomic, make sure to do this in a toolbox container:
sudo dnf install rclone
#+end_run

Once installed, you need to configure the remote SFTP server you want to publish to:

#+begin_run
rclone config
#+end_run

Follow the prompts to setup your SFTP remote, or you can see the
[[https://rclone.org/sftp/][example SFTP documentation]] for doing this. You must set all of the
following details:

 * The unique name of the remote (eg. =book=)
 * The hostname of the SFTP server (eg. =sftp.example.com=)
 * The SFTP username, password, or SSH key, and whether to use the SSH
   agent (recommended!)

The connection details are saved in your clone config file (eg.
=~/.config/rclone/rclone.conf=)

The included [[https://github.com/EnigmaCurry/org/blob/ox-hugo/Makefile][Makefile]] has a variable at the top called
=PUBLISH_RCLONE_REMOTE= (default =book=). Make sure this is the same
as the name of the rclone remote you configured (edit the Makefile if
it is not).

Once everything is configured, simply run =make publish= to publish
your site to the SFTP remote.

Your webserver document root needs to be configured to use the same
path that the SFTP server is configured for.

If you don't have a webserver or SFTP server, you can use the
following from d.rymcg.tech:

 * [[https://github.com/EnigmaCurry/d.rymcg.tech/tree/master/sftp#readme][SFTP server]]
 * [[https://github.com/EnigmaCurry/d.rymcg.tech/tree/master/nginx#readme][Nginx webserver]]

* Using Org-mode and Emacs
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: org-mode-emacs
:END:

** Using Org-mode and Emacs
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_WEIGHT: 2000
:END:

Here are some tips on using Org-mode and Emacs.

*** Read the Org manual

Many of these tips are found in the [[https://orgmode.org/org.html][Org Manual]].

#+attr_shortcode: :depth 999
#+begin_index
index
#+end_index
** Navigating Org-mode files
:PROPERTIES:
:EXPORT_FILE_NAME: navigating-org-mode
:END:

*** Navigating by search

One of the easiest ways of navigating an Org document, isn't even an
Org feature. Just search for the text you're looking for and jump
right to it.

 * Press =C-s= (or =M-x isearch-forward=)

Of course, you might not always know the exact text (or it might not
be unique enough to take you right there), so its useful to know some
other ways of navigating Org documents.
 
*** Navigating by headers

Another great way to navigate your Org documents is by traversing the
headers. My emacs config sets the default startup visibility to
folded, so you can always get back to a folded state:

 * Press =C-u C-u TAB= (or =M-x org-set-startup-visibility=)

Cycle the visibility of the headers (foldedness):
   
 * Press =TAB= to cycle the folding of the selected header (your
   cursor has to be on a header).
 * Press =C-u TAB= to cycle the folding of the headers in
   the whole buffer (cursor can be anywhere).
 * Press =C-u C-u C-u TAB= (or =M-x org-show-all) to show the entire
   buffer unfolded.
 
If you're in the middle of a paragraph, and want to move to the header
of the current section:

 * Press =C-c C-p= (or =M-x org-previous-visible-heading=)

To move to the next section:

 * Press =C-c C-n= (=M-x org-next-visible-heading=)

Moving to the next higher heading is very useful:

 * Press =C-c C-u= (or =M-x outline-up-heading=).

From the parent heading you get to see the outline of the outer
context of what you're currently writing about. From here you can
press =Tab= twice to fold all all the sibling sections and get an
overview.

 * Press =C-c C-u TAB TAB=.

Here are some other header movement commands:

 * =C-c C-f= (=M-x org-forward-heading-same-level=)
 * =C-c C-b= (=M-x org-backward-heading-same-level=)
   
*** Jumping around (org-goto)

You may frequently find yourself needing to jump around in a document,
but don't want to lose your current place.

 * Press =C-c C-j= (or =M-x org-goto=). Mnemonic "jump".
 * Immediately press =Enter= to close the org-goto menu (theres
   advanced searching functions in there, but you ignore that for
   now).

This will save your current place, allowing you to go find the place
you need to temporarily go to.

When you're done, and you want to go back to to where you were:

 * Press =C-c &=. (or =M-x org-mark-ring-goto=).

One mnemonic for =&= is that it is the same syntax for a C pointer
reference.
 
*** Indirect Buffers and Narrow To Subtree

One of the advantages of Org-mode is you can organize lots of
different articles into one big file. This is also a disadvantage when
you are trying to focus on just one of them. It is easy to get lost.

As an example, open the other book named [[https://github.com/EnigmaCurry/org/blob/ox-hugo/books/d.rymcg.tech.org?plain=1][d.rymcg.tech.org]] (found in
this same directory). Let's say we want to focus on the chapter named
=Traefik Proxy=.

 * Press =C-x 4 c=. (or =M-x clone-indirect-buffer-other-window=).

You now have *two buffers* open for the *same* file:
=d.rymcg.tech.org= (the original) and =d.rymcg.tech.org<2>= (the
clone), and you are automatically switched focus to the newly cloned
buffer.

Rename the new buffer to =traefik= so you don't get confused:

 * Press =C-x x r= (or =M-x rename-buffer=).
 * Type the new name: =traefik=.

Now find the chapter you want to focus on:
   
 * Navigate to the chapter heading named =* Traefik Proxy=, make sure
   your cursor is now somewhere on this line.

Narrow the buffer to the selected subtree:

 * Press =C-x n s= (or =M-x org-narrow-to-subtree=).

You have now completed the process of narrowing the content of this
buffer to only the Traefik Proxy article. It is important to know that
the =traefik= buffer is still an indirect clone of the original
=d.rymcg.tech.org= buffer, and they are both simultaneously editing
the same underlying file. But now you know how to focus on a bite
sized peice of a larger file. Go ahead and create more buffers to work
on other parts you frequently need to focus on.

If you need to widen the buffer again:

 * Press =C-x n w= (or =M-x widen=)


** Editing Org-mode files
:PROPERTIES:
:EXPORT_FILE_NAME: editing-org-mode
:END:

*** Hyperlinks

To add hyperlinks to documents, I find it easiest to type the text
first, and then add the link.

 * Type the link text.
 * Navigate point to the first character of the link text.
 * Press =C-SPC= (Control Spacebar) to mark the beginning.
 * Navigate point to the last character of the link text.
 * Press =C-c o i= (or =M-x org-insert-link=).
 * Enter the hyperlink URL.
 * Absolute URLs should start with =https://=.
 * Relative URLs can reference the root of the domain with =/=.
 * Just remember, since all links are going through Hugo, links have
   to be in the context of what the web browser can find, not all
   local Org links are valid.
   
* Examples
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: examples
:END:

** Example Org / Hugo content
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:

This chapter serves as an example of various shortcodes/markup for
[[https://ox-hugo.scripter.co/doc/shortcodes/][Ox-Hugo]] and the [[https://mcshelby.github.io/hugo-theme-relearn/shortcodes/index.html][Hugo Relearn theme]].

This chapter is broken into several sub-chapters to discuss the
various Hugo related features.

#+attr_shortcode: :depth 999
#+begin_index
index
#+end_index

** Example Org Blocks
:PROPERTIES:
:EXPORT_FILE_NAME: org-blocks
:END:

A couple examples [[https://ox-hugo.scripter.co/doc/org-special-blocks/][ripped from the ox-hugo docs]].

*** Asides

This is a normal paragraph.

#+begin_aside
This is an aside note, which should wrap and stay close to the right hand side of the page. It is used to call out things in an editorial voice.
#+end_aside

This is another normal paragraph.

*** Markers

This paragraph has some
#+begin_mark
highlighted words
#+end_mark
in it.

*** Details

This section shows some hidden details:

#+begin_details
This content is hidden by default.

#+begin_aside
It can contain any
#+begin_mark
additional markup
#+end_mark
you want.
#+end_aside

#+end_details

** Example Shortcodes
:PROPERTIES:
:EXPORT_FILE_NAME: shortcodes
:END:
Here are some example usage of the [[https://mcshelby.github.io/hugo-theme-relearn/shortcodes/index.html][shortcodes provided by the Hugo
Relearn theme]]. Shortcodes are a native feature of Hugo and Hugo
themes. For use with Ox-Hugo, you need to set the
=#+hugo_paired_shortcodes= (For examples, see [[https://ox-hugo.scripter.co/doc/shortcodes/#hugo-paired-shortcodes][Ox-hugo docs]] or the top
of this source file).

You can only use the icon names from the [[https://fontawesome.com/v6/search?o=r&m=free]["free" set provided by
fontawesome]].

*** Badges

#+attr_shortcode: :icon check :style green
#+begin_badge
1.0.0
#+end_badge

#+attr_shortcode: :icon star :style orange
#+begin_badge
99,999
#+end_badge

#+attr_shortcode: :icon phone :style primary
#+begin_badge
867-5309
#+end_badge

#+attr_shortcode: :icon envelope :title Email :style transparent
#+begin_badge
me@example.com
#+end_badge

#+attr_shortcode: :icon book :title Docs
#+begin_badge
https://book.rymcg.tech
#+end_badge

#+attr_shortcode: :icon dumpster-fire :style red
#+begin_badge
Dumpster Fire
#+end_badge

*** Buttons

#+attr_shortcode: :icon code-branch :style primary :href https://github.com/EnigmaCurry/d.rymcg.tech
#+begin_button
d.rymcg.tech
#+end_button

#+attr_shortcode: :icon download :style green :href https://github.com/EnigmaCurry/d.rymcg.tech
#+begin_button
d.rymcg.tech
#+end_button

#+attr_shortcode: :icon door-closed :style red
#+begin_button
Cancel
#+end_button

*** Math

Math with [[https://www.mathjax.org/][MathJax]]:

#+attr_shortcode: :align center
#+begin_math
$$\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)$$
#+end_math

*** Flowcharts

#+begin_mermaid
---
title: Example Diagram
---
graph LR;
    A[Hard edge] -->|Link text| B(Round edge)
    B --> C{<strong>Decision</strong>}
    C -->|One| D[Result one]
    C -->|Two| E[Result two]
#+end_mermaid

*** Notices

#+attr_shortcode:  :style grey :title Notice
#+begin_notice
This is a generic notice.
#+end_notice

#+attr_shortcode:  :style orange :icon bug
#+begin_notice
This is a bug notice.
#+end_notice

#+attr_shortcode:  :style info
#+begin_notice
This is an information box. 
#+end_notice

#+attr_shortcode:  :style tip
#+begin_notice
This is a tip or pointer. 
#+end_notice

#+attr_shortcode:  :style warning :icon skull-crossbones
#+begin_notice
This is a warning.
#+end_notice

*** OpenAPI

Visualize your API with swagger spec.

#+attr_shortcode: :src /openapi/petstore.json
#+begin_openapi

#+end_openapi

** Examples of Subchapters
*** Deeply ...
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: deeply
:END:

**** Example of a deeply ...
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:

#+attr_shortcode: :depth 999
#+begin_index
index
#+end_index

**** Nested ...
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: nested
:END:
***** Nested ...
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:

#+attr_shortcode: :depth 999
#+begin_index
index
#+end_index

***** Sub-chapters
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: subchapters
:END:

****** Sub-chapter 1
:PROPERTIES:
:EXPORT_FILE_NAME: subchapter1
:END:

This is a deeply nested sub-chapter. Take a look at the Org source. It
requires that you create several headings and create the index in a
sub-heading of the same name. It is a strangeness about ox-hugo that
this is required. If you make a strictly hierarchical outline, the
content will be duplicated, however the structure we're using hides
the nested content on the index pages, leaving it for the nested page
only.

****** Sub-chapter 2
:PROPERTIES:
:EXPORT_FILE_NAME: subchapter2
:END:

This is another deeply nested sub-chapter as a sibling of the one before it.

****** Sub-chapter 3
:PROPERTIES:
:EXPORT_FILE_NAME: subchapter3
:END:

This is another deeply nested sub-chapter as a sibling of the one before it.

