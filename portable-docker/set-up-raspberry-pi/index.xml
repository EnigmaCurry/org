<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Set up Raspberry Pi :: book.rymcg.tech</title>
    <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/index.html</link>
    <description> Index Build your Raspberry Pi Install Raspberry Pi OS Set up networking Set up SSH Install Docker Install d.rymcg.tech Install Traefik Install Whoami </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build your Raspberry Pi</title>
      <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/build-your-pi/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/build-your-pi/index.html</guid>
      <description>These are the parts you will need to source for this build:&#xA;Raspberry Pi 5 motherboard The Raspberry Pi 5 is often sold in kits, but you can also buy the motherboard separately. If buying a pre-made kit, make sure it includes an NVME shield to plug in an NVME SSD. Otherwise, this can be purchased separately:&#xA;Geeekpi case, heatsink, NVME shield, and power supply This kit comes with the NVME shield, which is an adapter (hat) to install on top of the Raspberry Pi 5 motherboard.</description>
    </item>
    <item>
      <title>Install Raspberry Pi OS</title>
      <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-raspbian/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-raspbian/index.html</guid>
      <description>The best way to install Raspberry Pi OS onto an SD-card, is to use the rpi-imager program from another computer. This allows you to set up the user account, network settings, and SSH credentials all from the imager software.&#xA;Download the Raspberry PI Imager or install rpi-imager from your package manager.&#xA;Run rpi-imager.&#xA;Click on the menu labled Rasperry Pi Device.&#xA;Choose your model of raspberry pi. Click on the menu labeled Operating System</description>
    </item>
    <item>
      <title>Set up networking</title>
      <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/set-up-networking/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/set-up-networking/index.html</guid>
      <description>Wi-Fi You may have already configured the Wi-Fi in the rpi-imager options, but if not, you can do so after its been installed.&#xA;Run this on the Raspberry Pi sudo raspi-config Enter System Options. Enter S1 Wireless LAN. Choose your current country. Enter the SSID (Wi-Fi network name) you wish to connect to. Enter the network passphrase Configure DNS By default, DNS is handled via DHCP, which will probably work in the majority of cases.</description>
    </item>
    <item>
      <title>Set up SSH</title>
      <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/set-up-ssh/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/set-up-ssh/index.html</guid>
      <description>The Docker context is controlled exclusively through SSH, as the root user. This requires setting up some keys to allow the pi user to access the root user’s account.&#xA;Although you will not need to interact with the root user’s shell directly, the pi user will be granted full access to root via SSH.&#xA;Docker == root == pi SSH is used here almost like sudo. The pi user should be treated with the same respect as the root user, as it will be granted full root access through SSH (to localhost).</description>
    </item>
    <item>
      <title>Install Docker</title>
      <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-docker/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-docker/index.html</guid>
      <description>Install Docker On the pi, install docker: Run this on the Raspberry Pi curl -sSL https://get.docker.com | sh Test docker is working: Run this on the Raspberry Pi sudo docker run hello-world If working, you should see a Hello from Docker! message and some other help info. Tip Normally, you shouldn’t use sudo docker. In the next section you will create a Docker context for the pi user to use directly.</description>
    </item>
    <item>
      <title>Install d.rymcg.tech</title>
      <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-d-rymcg-tech/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-d-rymcg-tech/index.html</guid>
      <description>Install dependencies Run this on the Raspberry Pi sudo apt-get update &amp;&amp; \ sudo apt-get install -y bash build-essential gettext \ git openssl apache2-utils xdg-utils jq sshfs \ wireguard curl inotify-tools w3m Clone the git repository Run this on the Raspberry Pi git clone https://github.com/EnigmaCurry/d.rymcg.tech.git \ ${HOME}/git/vendor/enigmacurry/d.rymcg.tech cd ${HOME}/git/vendor/enigmacurry/d.rymcg.tech Configure Bash shell integration Configure the pi user’s ~/.bashrc file:&#xA;Run this on the Raspberry Pi cat &lt;&lt;&#39;EOF&#39; &gt;&gt; ~/.bashrc export PATH=${PATH}:${HOME}/git/vendor/enigmacurry/d.</description>
    </item>
    <item>
      <title>Install Traefik</title>
      <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-traefik/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-traefik/index.html</guid>
      <description>Traefik is the application proxy (HTTP / TCP / UDP) that is the entrypoint, and router, for all of your web services. Traefik facilitates automatic TLS certificate requests via Let’s Encrypt, and handles transport security for all of your applications. Traefik is configured to support several authentication + sentry authorization mechanisms, including: HTTP Basic Auth, OAuth2, mutual TLS, and IP address filtering.&#xA;Basic Traefik config Run this on the Raspberry Pi d make traefik config This presents the interactive configuration menu for Traefik:</description>
    </item>
    <item>
      <title>Install Whoami</title>
      <link>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-whoami/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/portable-docker/set-up-raspberry-pi/install-whoami/index.html</guid>
      <description>What is Whoami? Install Set up temporary DNS override Open whoami in the web browser View the logs What is Whoami? Whoami is a web application that simply outputs the request headers that it receives (reflecting them back to the requesting client):&#xA;Run this later after you install it: curl https://whoami.example.com (stdout) Name: default Hostname: 38704012c4b3 IP: 127.0.0.1 IP: ::1 IP: 172.19.0.2 RemoteAddr: 172.19.0.1:34610 GET / HTTP/1.1 Host: whoami.example.com User-Agent: curl/7.</description>
    </item>
  </channel>
</rss>