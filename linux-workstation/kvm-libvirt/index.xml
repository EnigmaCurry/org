<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KVM / libvirt :: book.rymcg.tech</title>
    <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/index.html</link>
    <description>Idealistically, the introduction declared a “No Sworkstations” rule (No Server-Workstations). Pragmatically, you can bend this rule a bit, by hosting some development servers inside of virtual machines (VM). Hosting VMs on your workstation is convenient for having a portable lab environment. By using virtual machines for all services, we get to maintain our core distinction between the roles of workstation and server.&#xA;This paradigm is considerably more adhoc than a proper hypervisor operating system like Proxmox.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://book.rymcg.tech/linux-workstation/kvm-libvirt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install libvirtd</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/install-libvirtd/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/install-libvirtd/index.html</guid>
      <description>This book is primarily about Fedora Atomic Desktop (sway) hosts, but these instructions are generic enough to work on a wide variety of systemd based Linux operating systems, including Fedora Workstation (traditional), Fedora CoreOS, Arch Linux, and Debian (with caveats).&#xA;Packages for Fedora Atomic Desktop hosts Tip Full package installation for Fedora Atomic Desktop hosts are covered in the chapter on Layering packages.&#xA;Packages for Fedora CoreOS [bash]: Run this on your workstation: sudo rpm-ostree install qemu-kvm libvirt virt-manager virt-viewer \ virt-install libvirt-daemon-config-network libvirt-daemon-kvm \ libguestfs-tools python3-libguestfs virt-top distrobox make Packages for traditional Fedora Workstation hosts Info These are the packages you would need to install on traditional Fedora Workstation (or Server, but not CoreOS nor Atomic hosts)</description>
    </item>
    <item>
      <title>Setup libvirtd</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/setup-libvirtd/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/setup-libvirtd/index.html</guid>
      <description>Enable libvirtd service [bash]: Run this on your workstation: sudo systemctl enable --now libvirtd sudo systemctl enable --now libvirt-guests sudo systemctl status --no-pager libvirtd Start the default network [bash]: Run this on your workstation: sudo virsh net-start default sudo virsh net-autostart default Configure /etc/group Add the existing libvirt group to /etc/group, if it isn’t already: [bash]: Run this on your workstation: grep &#34;^libvirt:&#34; /etc/group || sudo bash -c &#34;getent group libvirt &gt;&gt; /etc/group&#34;</description>
    </item>
    <item>
      <title>Create VM admin</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/dedicated-vm-user/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/dedicated-vm-user/index.html</guid>
      <description>This will create a new user account on your workstation named libvirt-admin. This user will be used as the owner for all the VM disk images, config files, and for running the libvirt (qemu) processes that run your VM.&#xA;This separation from the normal account you use is important to limit the privileges that you have over the VM infrastructure. Your normal account should be able to SSH into the VM and have full root privleges inside the VM.</description>
    </item>
    <item>
      <title>Configure VM</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/config-vm/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/config-vm/index.html</guid>
      <description>Choose a name [bash]: Customize and set temporary environment variables NAME=debian-dev Choose hardware sizes [bash]: Customize and set temporary environment variables MEMORY=1024 CPUS=2 DISK_SIZE=50 Choose cloud image You can choose any standard cloud image that supports cloud-init.&#xA;Debian 12 [bash]: Customize and set temporary environment variables OS_VARIANT=debian12 CLOUD_IMAGE=https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2 Tip On slighly older versions of libvirt, you may need to set OS_VARIANT differently, but the image should still work:&#xA;[bash]: Customize and set temporary environment variables OS_VARIANT=debian11</description>
    </item>
    <item>
      <title>Create VM (cloud-init)</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/create-vm/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/create-vm/index.html</guid>
      <description>Info For this entire section you need to perform the VM config as the libvirt-admin user. Login to the shell account of libvirt-admin: [bash]: Run this on your workstation: sudo su libvirt-admin -l Source the config Now, and anytime you come back later to work on the same VM, source the config file: Run this as the libvirt-admin user NAME=debian-dev source ~/libvirt/${NAME}.env Create directories to hold the VM disks and config files: Run this as the libvirt-admin user mkdir -p ~/libvirt/{cloud-images,disks,cloud-init,iso} Create the cloud-init config file: Run this as the libvirt-admin user cat &lt;&lt; EOF | sed &#39;s/\xe2\x80\x8b//g&#39; &gt; ${USER_DATA} #cloud-config hostname: ${NAME} users: ​ - name: root ssh_authorized_keys: ​ - $(cat ~/libvirt/user-ssh.</description>
    </item>
    <item>
      <title>Systemd services to control VMs</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/systemd/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/systemd/index.html</guid>
      <description>Systemd services can provide an easy way to manage the on/off state of the VMs (systemctl start/stop), and can (optionally) start VMs automatically when the host system boots.&#xA;Warning libvirt has its own autostart feature, but we’re not using that, because I couldn’t get it to work in user session mode. Systemd units per VM feels nicer anyway.&#xA;Download libvirt python interface Tip You should now be in your normal workstation account Bash shell.</description>
    </item>
    <item>
      <title>Public routes to VMs</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/public-routes/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/public-routes/index.html</guid>
      <description>By default, all incoming traffic to the VMs must originate from your workstation (or another VM on your workstation) - no traffic is routed to your VMs from any other interface.&#xA;If you want to break this rule, and allow public routes into these VMs (DNAT port forwarding), you will need to install the libvirt hook that sets up the iptables forwarding rules:&#xA;Download the port-forwarding hook [bash]: Run this on your workstation: sudo mkdir -p /usr/local/src/ sudo su -c &#34;</description>
    </item>
    <item>
      <title>Setup workstation SSH config</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/setup-workstation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/setup-workstation/index.html</guid>
      <description>Info For this section, you are back to using your normal workstation user.&#xA;Append a new host config into your SSH config (~/.ssh/config):&#xA;Edit this file: ~/.ssh/config Host debian-dev Hostname 192.168.122.2 User root ControlMaster auto ControlPersist yes ControlPath /tmp/ssh-%u-%r@%h:%p Info Make sure Host and Hostname are set correctly for your VM.&#xA;With this config, you can now use SSH to control the VM:&#xA;[bash]: Run this on your workstation: ssh debian-dev whoami (stdout) root Install Docker You’re now ready to use your VM as an install target for whatever you want.</description>
    </item>
    <item>
      <title>Manually create VM from .iso</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/vm-from-iso/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/vm-from-iso/index.html</guid>
      <description>The previous section named Create VM (cloud-init) installed a VM from a cloud-init enabled image (colloquially known as a “cloud image”), which is the streamlined and preferred method of VM installation. However, not all Linux distributions have a cloud image available. You may need to manually install the OS using a traditional graphical installer. Thats what this section is all about.&#xA;As an example, these are the steps to install a VM using Fedora CoreOS (which does not support cloud-init, nor a traditional installer).</description>
    </item>
  </channel>
</rss>