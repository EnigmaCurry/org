<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KVM / libvirt :: book.rymcg.tech</title>
    <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/index.html</link>
    <description>You can bend the “no servers on workstations” rule, a bit, by hosting some development servers inside of virtual machines (VM) on your workstation. Keeping your development servers in isolated VMs, running under a dedicated VM user account, will keep your workstation clean. You can treat these VMs just like any other remote Linux host, and access them over SSH, and have them automatically start when your workstation boots.&#xA;These instructions will install a barebones Debian server in a VM, with NAT networking (private IP address, no public ports open), for local development/testing purposes only.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://book.rymcg.tech/linux-workstation/kvm-libvirt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enable libvirtd</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/setup-libvirtd/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/setup-libvirtd/index.html</guid>
      <description> Tip This depends on the libvirt packages installed in the chapter on Layering packages. [bash]: Run this on your workstation: sudo systemctl enable --now libvirtd sudo systemctl status --no-pager libvirtd Add the existing libvirt group to /etc/group, if it isn’t already: [bash]: Run this on your workstation: grep &#34;^libvirt:&#34; /etc/group || sudo bash -c &#34;getent group libvirt &gt;&gt; /etc/group&#34; </description>
    </item>
    <item>
      <title>Create VM admin</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/dedicated-vm-user/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/dedicated-vm-user/index.html</guid>
      <description>This will create a new user account on your workstation named libvirt-admin. This user will be used as the owner for all the VM disk images, config files, and for running the libvirt (qemu) processes that run your VM.&#xA;This separation from the normal account you use is important to limit the privileges that you have over the VM infrastructure. Your normal account should be able to SSH into the VM and have full root prileges inside the VM.</description>
    </item>
    <item>
      <title>Configure VM</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/config-vm/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/config-vm/index.html</guid>
      <description>Choose hardware sizes [bash]: Customize and set temporary environment variables MEMORY=1024 CPUS=2 DISK_SIZE=50 Choose cloud image You can choose any standard cloud image that supports cloud-init.&#xA;Debian 12 [bash]: Customize and set temporary environment variables OS_VARIANT=debian12 CLOUD_IMAGE=https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2 Fedora 40 [bash]: Customize and set temporary environment variables OS_VARIANT=fedora40 CLOUD_IMAGE=https://download.fedoraproject.org/pub/fedora/linux/releases/40/Cloud/x86_64/images/Fedora-Cloud-Base-Generic.x86_64-40-1.14.qcow2 Find the default subnet (virbr0) [bash]: Run this on your workstation: ip route | grep virbr0 | cut -d &#34; &#34; -f 1 (stdout) 192.</description>
    </item>
    <item>
      <title>Create VM</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/create-vm/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/create-vm/index.html</guid>
      <description>Info For this entire section you need to perform the VM config as the libvirt-admin user. Login to the shell account of libvirt-admin: [bash]: Run this on your workstation: sudo su libvirt-admin -l Source the config Now, and anytime you come back later to work on the same VM, source the config file: Run this as the libvirt-admin user source ~/libvirt/${NAME}.env Create directories to hold the VM disks and config files: Run this as the libvirt-admin user mkdir -p ~/libvirt/{cloud-images,disks,cloud-init} Create the cloud-init config file: Run this as the libvirt-admin user cat &lt;&lt; EOF | sed &#39;s/\xe2\x80\x8b//g&#39; &gt; ${USER_DATA} #cloud-config hostname: ${NAME} users: ​ - name: root ssh_authorized_keys: ​ - $(cat ~/libvirt/user-ssh.</description>
    </item>
    <item>
      <title>Setup workstation SSH config</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/setup-workstation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/setup-workstation/index.html</guid>
      <description>Info For this section, you are back to using your normal workstation user.&#xA;Append a new host config into your SSH config (~/.ssh/config):&#xA;Edit this file: ~/.ssh/config Host debian-dev Hostname 192.168.122.2 User root ControlMaster auto ControlPersist yes ControlPath /tmp/ssh-%u-%r@%h:%p Info Make sure Host and Hostname are set correctly for your VM.&#xA;With this config, you can now use SSH to control the VM:&#xA;[bash]: Run this on your workstation: ssh debian-dev whoami (stdout) root Install Docker or something else It is recommended to install Docker on your Debian VM.</description>
    </item>
    <item>
      <title>VM management commands</title>
      <link>https://book.rymcg.tech/linux-workstation/kvm-libvirt/vm-management/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://book.rymcg.tech/linux-workstation/kvm-libvirt/vm-management/index.html</guid>
      <description>Tip The rest of these commands (greyed out) are examples only, you don’t need to run them now.&#xA;List all defined VMs Run this as the libvirt-admin user virsh list --all (stdout) ​ Id Name State ​--------------------------- ​ 5 debian-dev running Start VM (named debian-dev) Run this as the libvirt-admin user virsh start debian-dev Stop VM (named debian-dev) Run this as the libvirt-admin user ​# destroy actually just means stop, not delete virsh destroy debian-dev Show network interface (MAC address) Run this as the libvirt-admin user virsh domiflist debian-dev Undefine VM (named debian-dev) Run this as the libvirt-admin user ​# undefine removes the VM configuration virsh undefine debian-dev Serial console of VM (named debian-dev) Run this as the libvirt-admin user virsh console debian-dev To exit the console, press Ctrl-].</description>
    </item>
  </channel>
</rss>